{"version":3,"sources":["components/xrp.js","components/btc.js","components/bch.js","components/eth.js","components/marketPrices.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Xrp","state","symbol","undefined","currency","product","bid","ask","expires_in_seconds","getMarket","a","fetch","api_call","json","data","console","log","setState","markets","this","refreshPage","setTimeout","componentDidMount","bind","Component","Btc","Bch","Eth","MarketPrices","style","width","margin","className","col","tablet","Navbar","fixedHeader","title","color","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.480d6c28.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport class Xrp extends Component {\r\n  state = {\r\n    symbol: undefined,\r\n    currency: undefined,\r\n    product: undefined,\r\n    bid: undefined,\r\n    ask: undefined,\r\n    expires_in_seconds: undefined\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMarket();\r\n    this.refreshPage();\r\n  }\r\n\r\n  getMarket = async () => {\r\n    //const city = e.target.elements.city.value;\r\n    //const country = e.target.elements.country.value;\r\n    const api_call = await fetch(`https://quote.coins.ph/v1/markets`);\r\n    const data = await api_call.json();\r\n    console.log(data);\r\n\r\n    this.setState({\r\n      symbol: data.markets[19].symbol,\r\n      currency: data.markets[19].currency,\r\n      product: data.markets[19].product,\r\n      bid: data.markets[19].bid,\r\n      ask: data.markets[19].ask,\r\n      expires_in_seconds: data.markets[19].expires_in_seconds\r\n    });\r\n  };\r\n\r\n  refreshPage() {\r\n    setTimeout(\r\n      function() {\r\n        this.componentDidMount();\r\n      }.bind(this),\r\n      3000\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/*<h1>Symbol: {this.state.symbol}</h1>\r\n        <h1>currency: {this.state.currency}</h1>*/}\r\n\r\n        <h5>XRP</h5>\r\n        <h4>Sell: {this.state.bid}</h4>\r\n        <h4>Buy: {this.state.ask}</h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Xrp;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class Btc extends Component {\r\n  state = {\r\n    symbol: undefined,\r\n    currency: undefined,\r\n    product: undefined,\r\n    bid: undefined,\r\n    ask: undefined,\r\n    expires_in_seconds: undefined\r\n  };\r\n  componentDidMount() {\r\n    this.getMarket();\r\n    this.refreshPage();\r\n  }\r\n  getMarket = async () => {\r\n    //const city = e.target.elements.city.value;\r\n    //const country = e.target.elements.country.value;\r\n    const api_call = await fetch(`https://quote.coins.ph/v1/markets`);\r\n    const data = await api_call.json();\r\n    console.log(data);\r\n\r\n    this.setState({\r\n      symbol: data.markets[8].symbol,\r\n      currency: data.markets[8].currency,\r\n      product: data.markets[8].product,\r\n      bid: data.markets[8].bid,\r\n      ask: data.markets[8].ask,\r\n      expires_in_seconds: data.markets[8].expires_in_seconds\r\n    });\r\n  };\r\n\r\n  refreshPage() {\r\n    setTimeout(\r\n      function() {\r\n        this.componentDidMount();\r\n      }.bind(this),\r\n      3000\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/*<h1>Symbol: {this.state.symbol}</h1>\r\n        <h1>currency: {this.state.currency}</h1>*/}\r\n\r\n        <h5>Bitcoin</h5>\r\n        <h4>Sell: {this.state.bid}</h4>\r\n        <h4>Buy: {this.state.ask}</h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Btc;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class Bch extends Component {\r\n  state = {\r\n    symbol: undefined,\r\n    currency: undefined,\r\n    product: undefined,\r\n    bid: undefined,\r\n    ask: undefined,\r\n    expires_in_seconds: undefined\r\n  };\r\n  componentDidMount() {\r\n    this.getMarket();\r\n    this.refreshPage();\r\n  }\r\n  getMarket = async () => {\r\n    //const city = e.target.elements.city.value;\r\n    //const country = e.target.elements.country.value;\r\n    const api_call = await fetch(`https://quote.coins.ph/v1/markets`);\r\n    const data = await api_call.json();\r\n    console.log(data);\r\n\r\n    this.setState({\r\n      symbol: data.markets[0].symbol,\r\n      currency: data.markets[0].currency,\r\n      product: data.markets[0].product,\r\n      bid: data.markets[0].bid,\r\n      ask: data.markets[0].ask,\r\n      expires_in_seconds: data.markets[0].expires_in_seconds\r\n    });\r\n  };\r\n\r\n  refreshPage() {\r\n    setTimeout(\r\n      function() {\r\n        this.componentDidMount();\r\n      }.bind(this),\r\n      3000\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/*<h1>Symbol: {this.state.symbol}</h1>\r\n        <h1>currency: {this.state.currency}</h1>*/}\r\n\r\n        <h5>Bitcoin Cash</h5>\r\n        <h4>Sell: {this.state.bid}</h4>\r\n        <h4>Buy: {this.state.ask}</h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Bch;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class Eth extends Component {\r\n  state = {\r\n    symbol: undefined,\r\n    currency: undefined,\r\n    product: undefined,\r\n    bid: undefined,\r\n    ask: undefined,\r\n    expires_in_seconds: undefined\r\n  };\r\n  componentDidMount() {\r\n    this.getMarket();\r\n    this.refreshPage();\r\n  }\r\n  getMarket = async () => {\r\n    //const city = e.target.elements.city.value;\r\n    //const country = e.target.elements.country.value;\r\n    const api_call = await fetch(`https://quote.coins.ph/v1/markets`);\r\n    const data = await api_call.json();\r\n    console.log(data);\r\n\r\n    this.setState({\r\n      symbol: data.markets[14].symbol,\r\n      currency: data.markets[14].currency,\r\n      product: data.markets[14].product,\r\n      bid: data.markets[14].bid,\r\n      ask: data.markets[14].ask,\r\n      expires_in_seconds: data.markets[14].expires_in_seconds\r\n    });\r\n  };\r\n\r\n  refreshPage() {\r\n    setTimeout(\r\n      function() {\r\n        this.componentDidMount();\r\n      }.bind(this),\r\n      3000\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/*<h1>Symbol: {this.state.symbol}</h1>\r\n        <h1>currency: {this.state.currency}</h1>*/}\r\n\r\n        <h5>Ethereum</h5>\r\n        <h4>Sell: {this.state.bid}</h4>\r\n        <h4>Buy: {this.state.ask}</h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Eth;\r\n","import React, { Component } from \"react\";\r\nimport Xrp from \"./xrp\";\r\nimport Btc from \"./btc\";\r\nimport Bch from \"./bch\";\r\nimport Eth from \"./eth\";\r\n\r\nimport { Grid, Cell } from \"react-mdl\";\r\n\r\nexport class MarketPrices extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={{ width: \"80%\", margin: \"auto\" }}>\r\n          <Grid className=\"frist-grid\">\r\n            <Cell col={6} tablet={4}>\r\n              <Xrp />\r\n            </Cell>\r\n            <Cell col={6} tablet={4}>\r\n              <Btc />\r\n            </Cell>\r\n          </Grid>\r\n\r\n          <Grid className=\"second-grd\">\r\n            <Cell col={6} tablet={4}>\r\n              <Bch />\r\n            </Cell>\r\n            <Cell col={6} tablet={4}>\r\n              <Eth />\r\n            </Cell>\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MarketPrices;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Layout,\r\n  Header,\r\n  Navigation,\r\n  Drawer,\r\n  Content,\r\n  FABButton,\r\n  Icon\r\n} from \"react-mdl\";\r\n\r\nimport MarketPrices from \"./marketPrices\";\r\n\r\nexport class Navbar extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Layout fixedHeader>\r\n          <Header\r\n            title={\r\n              <span>\r\n                <span style={{ color: \"#ddd\" }}>Area / </span>\r\n                <strong>The Title</strong>\r\n              </span>\r\n            }\r\n          >\r\n            <Navigation>\r\n              <a href=\"#\">About</a>\r\n              <a href=\"#\">Donate</a>\r\n            </Navigation>\r\n          </Header>\r\n          <MarketPrices />\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Navbar from \"./components/navbar\";\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"react-mdl/extra/material.css\";\nimport \"react-mdl/extra/material.js\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}